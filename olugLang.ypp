%{
#include "tree.h"
#include<stdio.h>
#include<iostream>
#include<cstring>
#include<map>
#include<vector>
#include<string>
#include<stack>
extern int yylex(void);
extern int lineNum;
extern SymbolTable<string, Value*> symbols;
vector<ExprAST*>* lines = new vector<ExprAST*>();
stack<vector<ExprAST*>*> parseStack;

vector<ExprAST*> funcLines;
vector<VarInitExprAST*> args;
vector<ExprAST*> callArgs;
using namespace std;
void yyerror(char const *s) 
{ 
  cerr << "\033[31m ERROR: \033[37m" << s << " in line: " << lineNum << endl;
}
%}

%code requires
{
#include "tree.h"
}

%require "3.0"
%error-verbose

%union
{
  int intVal;
  char charVal;
  double doubleVal;
  const char* strVal;
  VarInitExprAST* varInit;
  FunctionAST* fdef;
  PrototypeAST* proto;
  CallExprAST* functionCall;
  IfExprAST* _if;
  BinaryExprAST* bo;
  DoubleExprAST* dval;
  IntExprAST* ival;
  ExprAST* expr;
  CharExprAST* charAST;
  ForExprAST* _for;
  LetExprAST* let;
  std::vector<ExprAST*>* blk;
  std::vector<FunctionAST*>* funcBlk;
  std::vector<VarInitExprAST*>* varBlk;
};

%token NUMBER FLOAT IS ISNOT LET FOR TO NEXT
%token ID END CHARACTER STRING
%token _BEGIN EXTERN LABEL GOTO VAR CALL IF  
%token INT DOUBLE CHAR
%token RARROW LARROW CAROT
%token EQUAL COMPEQUAL GT LT GTE LTE NEQUAL PLUS MINUS MUL DIV MOD EMARK QMARK AND OR LSBRACE RSBRACE LPAREN RPAREN LBRACE RBRACE AT DOT COMMA COLON SEMICOLON

%left EQUAL;
%left LT GT LTE GTE;
%left PLUS MINUS;
%left MUL DIV;
%nonassoc LPAREN

%type <intVal> NUMBER
%type <doubleVal> FLOAT
%type <charVal> CHARACTER
%type <strVal> ID END IS ISNOT STRING _BEGIN EXTERN VAR CALL IF INT DOUBLE CHAR RARROW LARROW CAROT LET FOR TO NEXT
%type <strVal> EQUAL COMPEQUAL GT LT GTE LTE NEQUAL PLUS MINUS MUL DIV MOD EMARK QMARK AND OR LSBRACE RSBRACE LPAREN RPAREN LBRACE RBRACE AT DOT COMMA COLON SEMICOLON

%type <proto> prototype
%type <varInit> varDef
%type <charVal> op boolOp
%type <expr> numVal operand command 
%type <bo> binOp
%type <_if> ifExpr
%type <functionCall> funcCall
%type <let> assignment
%type <_for> forLoop


%start program

%%
program: functions
       | externs functions

functions: functions function
         | function

function: prototype commands END { funcLines.push_back(new FunctionAST($1,*lines)); lines->clear(); }

prototype: _BEGIN ID LPAREN paramDefs RPAREN { $$ = new PrototypeAST($2,args); args.clear(); }
         | _BEGIN ID LPAREN RPAREN { $$ = new PrototypeAST($2,args); args.clear(); }

paramDefs: paramDefs COMMA paramDef
         | paramDef

paramDef: varDef  { args.push_back($1); }

externs: externs extern
       | extern

extern: EXTERN ID LPAREN RPAREN { createExtern(new PrototypeAST($2,args)); args.clear(); }
      | EXTERN ID LPAREN paramDefs RPAREN { createExtern(new PrototypeAST($2,args)); args.clear(); } 

commands: commands command { lines->push_back($2); }
        | command { lines->push_back($1); }

command: varDef { $$ = $1; }
       | funcCall { $$ = $1; }
       | ifExpr { $$ = $1; }
       | numVal { $$ = $1; }
       | binOp { $$ = $1; }
       | forLoop { $$ = $1; }
       | assignment { $$ = $1; }
          
varDef: VAR ID COLON INT { $$ = new VarInitExprAST($2,"int"); }
      | VAR ID COLON DOUBLE { $$ = new VarInitExprAST($2,"double"); }
      | VAR ID COLON CHAR { $$ = new VarInitExprAST($2,"char"); }

boolOp: IS { $$ = 'e'; }
      | ISNOT { $$ = 'n'; }

forStart: FOR { parseStack.push(lines); lines = new vector<ExprAST*>(); }

forLoop: forStart operand TO operand commands forEnd { vector<ExprAST*> tmp = *lines; $$ = new ForExprAST($2,$4,tmp); lines = parseStack.top(); parseStack.pop(); }

forEnd: NEXT { }

ifExpr: IF ID boolOp ID command { BinaryExprAST* tmp = new BinaryExprAST($3, new VariableRefAST($2), new VariableRefAST($4)); $$ = new IfExprAST(tmp,$5); }
      | IF ID boolOp numVal command { BinaryExprAST* tmp = new BinaryExprAST($3,new VariableRefAST($2),$4); $$ = new IfExprAST(tmp,$5); }
      | IF ID boolOp CHARACTER command { BinaryExprAST* tmp = new BinaryExprAST($3,new VariableRefAST($2),new CharExprAST($4)); $$ = new IfExprAST(tmp,$5); }

op: PLUS { $$ = '+'; }
  | MINUS { $$ = '-'; }
  | MUL { $$ = '*'; }
  | DIV { $$ = '/'; }

numVal: NUMBER { $$ = new IntExprAST($1); }
      | FLOAT { $$ = new DoubleExprAST($1); }

callarg: operand { callArgs.push_back($1); }

callargs: callarg callargs
        | callarg

operand: ID { $$ = new VariableRefAST($1); }
       | numVal { $$ = $1; }
       | binOp { $$ = $1; }
       | CHARACTER { $$ = new CharExprAST($1); }

assignment: LET ID EQUAL operand { $$ = new LetExprAST($2,$4); }

binOp: operand op operand { $$ = new BinaryExprAST($2,$1,$3); }

funcCall: CALL ID LPAREN RPAREN { $$ = new CallExprAST($2,callArgs); callArgs.clear(); }
        | CALL ID LPAREN callargs RPAREN { $$ = new CallExprAST($2,callArgs); callArgs.clear(); }
